knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse,dplyr,tidyr)
library(dplyr)
library(purrr)
library(tidyr)
library(ggplot2)
anew <- read_csv("all.csv")
stim <- read_csv("pseudorandomized_stimuli_list.csv")
xanew <- read_csv("Ratings_Warriner_et_al.csv")
data_anew <- merge(stim, anew, by.x = "word", by.y = "Description")
our_data <- merge(stim,xanew,by.x="word",by.y="Word")
# for stim values not in warriner values not in stim
non_match <- stim  %>%
filter(!stim$word %in% xanew$Word)
View(our_data)
# Making a new dataframe
df <- our_data
df <- df$trial_type <- 0
df$trial_type_dimensional <- 0
df$trial_type_dimensional <- ifelse(df$V.Mean.Sum < 3 | df$A.Mean.Sum < 3, "LVLA",
ifelse(df$V.Mean.Sum > 7 | df$A.Mean.Sum > 7, "HVHA",
ifelse(df$V.Mean.Sum < 3 | df$A.Mean.Sum > 7, "LVHA",
ifelse(df$V.Mean.Sum > 7 | df$A.Mean.Sum < 3, "HVLA","Neutral"))))
View(our_data)
our_data$trial_type <- ifelse(our_data$A.Mean.Sum > 5 & (our_data$V.Mean.Sum > 6 |our_data$V.Mean.Sum < 3),"Emotional","Neutral")
View(our_data)
ls.str(our_data)
setwd("~/Library/CloudStorage/OneDrive-Aarhusuniversitet/cognitive_science/5th_semester/bachelor/anew-1999")
pacman::p_load(readr)
event1 <- read_tsv('sub-0007_task-demonstrativechoice_run-1_events.tsv')
setwd("~/Library/CloudStorage/OneDrive-Aarhusuniversitet/cognitive_science/5th_semester/bachelor/anew-1999")
pacman::p_load(readr)
event1 <- read_tsv('sub-0007_task-demonstrativechoice_run-1_events.tsv')
library(dplyr)
our_data <- our_data %>% mutate(num_letters = nchar(words))
library(dplyr)
our_data <- our_data %>% mutate(num_letters = nchar(our_data$word))
ls.str(our_data)
num_letters_plot <- ggplot()+
geom_density(aes(num_letters,fill="our_data"),alpha=.2,data=our_data)+
labs(x="Number of letters",
subtitle = "Density Distribution Number of Letters",
caption = "Our data")+
num_letters_plot
num_letters_plot <- ggplot()+
geom_density(aes(num_letters,fill="our_data"),alpha=.2,data=our_data)+
labs(x="Number of letters",
subtitle = "Density Distribution Number of Letters",
caption = "Our data")
num_letters_plot
num_letters_plot <- ggplot()+
geom_density(aes(log(num_letters),fill="our_data"),alpha=.2,data=our_data)+
labs(x="Number of letters",
subtitle = "Density Distribution Number of Letters",
caption = "Our data")
num_letters_plot
num_letters_plot <- ggplot()+
geom_density(aes(num_letters),fill="our_data"),alpha=.2,data=our_data)+
num_letters_plot <- ggplot()+
geom_density(aes(num_letter),fill="our_data"),alpha=.2,data=our_data)+
num_letters_plot <- ggplot()+
geom_density(aes(num_letter,fill="our_data"),alpha=.2,data=our_data)+
labs(x="Number of letters",
subtitle = "Density Distribution Number of Letters",
caption = "Our data")
num_letters_plot
num_letters_plot <- ggplot()+
geom_density(aes(num_letters,fill="our_data"),alpha=.2,data=our_data)+
labs(x="Number of letters",
subtitle = "Density Distribution Number of Letters",
caption = "Our data")
num_letters_plot
library(brms)
mod_eqvar <- brm(
num_letters ~ trial_type,
data = df,
cores = 4,  # Use 4 cores for parallel processing
file = "iqgroup"  # Save results into a file
)
library(brms)
mod_eqvar <- brm(
num_letters ~ trial_type,
data = our_data,
cores = 4,  # Use 4 cores for parallel processing
file = "iqgroup"  # Save results into a file
)
summary(mod_eqvar)
library(bayesplot)
plot(mod_eqvar)
# Extract posterior probabilities for the difference between the means
posterior_probs <- posterior_prob(mod_eqvar, pars = c("mu_trial_type[1] - mu_trial_type[2]"))
# Extract posterior probabilities for the difference between the means
posterior_probs <- posterior_prob(mod_eqvar, pars = c("mu_trial_type[1] - mu_trial_type[2]"))
# Extract posterior probabilities for the difference between the means
posterior_probs <- posterior_prob(mod_eqvar, pars = c("mu_trial_type[1] - mu_trial_type[2]"))
# Extract posterior probabilities for the difference between the means
posterior_probs <- posterior_prob(mod_eqvar)
# Extract posterior probabilities for the difference between the means
posterior_probs <- posterior_prob(mod_eqvar)
install.packages("bayesplot")
# Extract posterior probabilities for the difference between the means
posterior_probs <- posterior_prob(mod_eqvar)
install.packages("bayesplot")
# Extract posterior probabilities for the difference between the means
posterior_probs <- posterior_prob(mod_eqvar, pars = c("mu_trial_type[1] - mu_trial_type[2]"))
install.packages("bayesplot")
install.packages("bayesplot")
install.packages("bayesplot")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse,dplyr,tidyr)
install.packages("bayesplot")
# Extract posterior probabilities for the difference between the means
posterior_probs <- posterior_prob(mod_eqvar, pars = c("mu_trial_type[1] - mu_trial_type[2]"))
pacman::p_load(bayesplot)
# Extract posterior probabilities for the difference between the means
posterior_probs <- posterior_prob(mod_eqvar, pars = c("mu_trial_type[1] - mu_trial_type[2]"))
pacman::p_load(bayesplot)
# Extract posterior probabilities for the difference between the means
posterior_probs <- posterior_prob(mod_eqvar, pars = c("mu_trial_type[1] - mu_trial_type[2]"))
install.packages("bayesplot")
install.packages("bayesplot")
install.packages("bayesplot")
install.packages("bayesplot")
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse,dplyr,tidyr)
# Extract posterior probabilities for the difference between the means
posterior_probs <- posterior_prob(mod_eqvar, pars = c("mu_trial_type[1] - mu_trial_type[2]"))
write_brms(mod_eqvar, file = "mod_eqvar.csv")
our_data %>%
group_by(trial_type) %>%
summarise(mean_letters = mean(num_letters))
ggplot(our_data, aes(x = num_letters, fill = trial_type)) +
geom_density(alpha = 0.5)
ggplot(our_data, aes(x = num_letters, fill = trial_type)) +
geom_density(alpha = 0.5) +
scale_fill_manual(
values = c("#2a1f55", "#b7e0e8")
)
ggplot(our_data, aes(x = num_letters, fill = trial_type)) +
geom_density(alpha = 0.5) +
scale_fill_manual(
values = c("#2a1f55", "#b7e0e8")
) +
theme(
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
)
ggplot(our_data, aes(x = num_letters, fill = trial_type)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("#2a1f55", "#b7e0e8")) +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
ggtitle("Hey")
ggplot(our_data, aes(x = num_letters, fill = trial_type)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("#2a1f55", "#b7e0e8")) +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
ggtitle("Plot of word lenght distribution across trials")
# Count the number of rows that have the value "Neutral" in the trial_type column
our_data %>%
filter(trial_type == "Neutral") %>%
summarise(neutral_trials = n())
# Count the number of rows that have the value "Emotional" in the trial_type column
our_data %>%
filter(trial_type == "Emotional") %>%
summarise(emotional_trials = n())
ggplot(our_data, aes(x = num_letters, fill = trial_type)) +
geom_density(alpha = 0.5) +
scale_fill_manual(values = c("#2a1f55", "#b7e0e8")) +
theme(panel.grid.major = element_blank(),panel.grid.minor = element_blank())+
ggtitle("Plot of word length distribution across trials")
View(our_data)
anew <- read_csv("all.csv")
stim <- read_csv("pseudorandomized_stimuli_list.csv")
xanew <- read_csv("Ratings_Warriner_et_al.csv")
data_anew <- merge(stim, anew, by.x = "word", by.y = "Description")
our_data <- merge(stim,xanew,by.x="word",by.y="Word")
# for stim values not in warriner values not in stim
non_match <- stim  %>%
filter(!stim$word %in% xanew$Word)
View(stim)
View(our_data)
knitr::opts_chunk$set(echo = TRUE)
# Loading
pacman::p_load(DescTools)
library(DescTools)
library(tidyverse)
new_path = '/Users/emmaolsen/Library/CloudStorage/OneDrive-Aarhusuniversitet/cognitive_science/5th_semester/bachelor/anew-1999/word_ratings_24.csv'
new_data <- read_csv(new_path,col_names = TRUE)
#new_data <- new_data[,-1]
#new_data <- new_data[-1,]
head(new_data)
library(dplyr)
df <- df %>%
select(tail(names(df),10))
library(dplyr)
df <- df %>%
dplyr::select(tail(names(df),10))
library(dplyr)
df <- df %>%
dplyr:::select(tail(names(df),10))
library(dplyr)
df <- df %>%
dplyr:::select(tail(names(df),10))
library(dplyr)
df <- df %>%
dplyr::select(tail(names(df),10))
library(dplyr)
df <- df %>%
slice(,ncol(df)-9:ncol(df))
df <- df %>%
slice(, ncol(df)-9:ncol(df))
df <- df %>%
slice(, ncol(df)-9:ncol(df))
df <- df %>%
select(names(df)[ncol(df)-9:ncol(df)])
df <- df %>%
dplyr::select(names(df)[ncol(df)-9:ncol(df)])
ncol(df)
df <- new_data %>%
dplyr::select(names(new_data)[ncol(new_data)-9:ncol(new_data)])
df
View(new_data)
View(df)
View(new_data)
View(df)
df <- new_data[1:(length(new_data)-5)]
head(df)
df <- new_data[5:(length(new_data))]
head(df)
df <- new_data[7:(length(new_data))]
head(df)
df <- new_data[20:(length(new_data))]
head(df)
df <- new_data[23:(length(new_data))]
head(df)
View(df)
krippelvalues <- as.matrix(df) %>%
t() %>% KrippAlpha(method = "nominal")
krippelvalues
View(df)
krip_df <- df
names(krip_df) <- NULL
krip_df
krip_df <- df
names(krip_df) <- NULL
krip_df
df <- new_data[23:(length(new_data))]
head(df)
krip_df <- df
names(krip_df) <- NULL
krip_df
krip_df <- df
names(krip_df) <- NULL
head(krip_df)
krip_df <- df
names(krip_df) <- NULL
krip_df
View(krip_df)
View(krip_df)
View(krip_df)
krip_df <- df
krip_df
old_path = '/Users/emmaolsen/Downloads/krippen-excel.xlsx'
# xlsx files
my_data <- read_excel(old_path)
library(readxl)
old_path = '/Users/emmaolsen/Downloads/krippen-excel.xlsx'
# xlsx files
my_data <- read_excel(old_path)
krippelvalues <- as.matrix(my_data) %>%
t() %>%
KrippAlpha(method = "nominal")
krippelvalues
#we here choose nominal since we are grouping the statements
library(readxl)
old_path = '/Users/emmaolsen/Downloads/krippen-excel.xlsx'
# xlsx files
my_data <- read_excel(old_path)
my_data_T <- t(my_data)
View(my_data_T)
new_path = '/Users/emmaolsen/Library/CloudStorage/OneDrive-Aarhusuniversitet/cognitive_science/5th_semester/bachelor/anew-1999/word_ratings_24.csv'
new_data <- read_csv(new_path,col_names = TRUE)
df <- new_data[23:(length(new_data))]
head(df)
krippelvalues <- as.matrix(df) %>%
KrippAlpha(method = "nominal")
krippelvalues
krippelvalues <- as.matrix(df) %>%
KrippAlpha(method = "nominal")
krippelvalues
matrix <- as.matrix(df)
View(matrix)
?KrippAlpha
alpha <- KrippAlpha(df,method=,raters=24,levx=2)
alpha <- KrippAlpha(df,method="nominal",raters=24,levx=2)
alpha <- KrippAlpha(df,method="nominal",raters=24,levx=2)
alpha <- KrippAlpha(as.matrix(df),method="nominal",raters=24,levx=2)
alpha <- KrippAlpha(df,method="nominal")
alpha <- KrippAlpha(df,method="nominal")
View(df)
alpha <- KrippAlpha(matrix,method="nominal")
alpha <- KrippAlpha(matrix,method="nominal")
knitr::opts_chunk$set(echo = TRUE)
# Loading
pacman::p_load(DescTools)
library(DescTools)
library(tidyverse)
library(readxl)
old_path = '/Users/emmaolsen/Downloads/krippen-excel.xlsx'
# xlsx files
my_data <- read_excel(old_path)
my_data_T <- t(my_data)
krippelvalues <- as.matrix(my_data) %>%
t() %>% # transposed cause data format is different than ours
KrippAlpha(method = "nominal")
krippelvalues
#we here choose nominal since we are grouping the statements
new_path = '/Users/emmaolsen/Library/CloudStorage/OneDrive-Aarhusuniversitet/cognitive_science/5th_semester/bachelor/anew-1999/word_ratings_24.csv'
new_data <- read_csv(new_path,col_names = TRUE)
df <- new_data[23:(length(new_data))]
head(df)
matrix <- as.matrix(df)
alpha <- KrippAlpha(matrix,method="nominal")
alpha <- KrippAlpha(df,method="nominal")
krippelvalues <- as.matrix(df) %>%
KrippAlpha(method = "nominal")
krippelvalues
install.packages("irr")
library(irr)
alpha = reliability(data = df, type = "alpha", raters=24, levx=2)
alpha = reliability(data = df, type = "alpha", raters=24, levx=2)
alpha = agree(data = df, type = "alpha", raters=24, levx=2)
alpha = agree(df)
print(alpha)
alpha = agree(t(df))
print(alpha)
# Percentage among raters
alpha = agree(t(df[,1]))
print(alpha)
# Percentage among raters
alpha = agree(t(df[,1]))
print(alpha)
# Percentage among raters
alpha = agree(t(df[,1]))
print(alpha)
# Percentage among raters
alpha = agree(t(df[,1]))
print(alpha)
# Percentage among raters
alpha = agree(t(df))
print(alpha)
col_names <- sample(names(df),3)
subset <- dataset[,colnames]
col_names <- sample(names(df),3)
subset <- df[,colnames]
df <- new_data[23:(length(new_data))]
head(df)
krippelvalues <- as.matrix(df) %>%
KrippAlpha(method = "nominal")
krippelvalues
col_names <- sample(names(df),3)
subset <- df[,colnames]
col_names <- sample(names(df),3)
subset <- df[,col_names]
# Percentage among raters
alpha = agree(subset)
print(alpha)
krippelvalues <- as.matrix(subset) %>%
KrippAlpha(method = "nominal")
krippelvalues <- as.matrix(subset) %>%
KrippAlpha(method = "nominal")
krippelvalues
df_nofirework <- select(df,-Firework...31)
df_nofirework <- select(df,-Firework...31)
df_nofirework
krippelvalues <- as.matrix(df_nofirework) %>%
KrippAlpha(method = "nominal")
krippelvalues
krippelvalues <- as.matrix(df) %>%
KrippAlpha(method = "nominal")
krippelvalues
df_valence <- new_data[1:10]
df_valence
View(df_valence)
df_valence <- new_data[3:13]
df_valence
df_valence <- new_data[3:13]
df_valence
krip_valence <- as.matrix(df_valence) %>%
KrippAlpha(method = "ordinal")
krip_valence
df_arousal <- new_data[13:23]
df_arousal
krip_valence <- as.matrix(df_arousal) %>%
KrippAlpha(method = "ordinal")
krip_valence
df_arousal <- new_data[13:23]
df_arousal
krip_arousal <- as.matrix(df_arousal) %>%
KrippAlpha(method = "ordinal")
krip_arousal
df_valence <- new_data[3:13]
df_valence
krip_valence <- as.matrix(df_valence) %>%
KrippAlpha(method = "ordinal")
krip_valence
krippelvalues <- as.matrix(df) %>%
KrippAlpha(method = "nominal")
krippelvalues
kripp.alpha(df,method="nominal")
kripp.alpha(as.matrix(df),method="nominal")
df_valence <- new_data[3:13]
df_valence
krip_valence <- as.matrix(df_valence) %>%
KrippAlpha(method = "ordinal")
krip_valence
df_arousal <- new_data[13:23]
df_arousal
krip_arousal <- as.matrix(df_arousal) %>%
KrippAlpha(method = "ordinal")
krip_arousal
df <- new_data[23:(length(new_data))]
knitr::opts_chunk$set(echo = TRUE)
pacman::p_load(tidyverse,dplyr,tidyr)
library(dplyr)
library(purrr)
library(tidyr)
library(ggplot2)
anew <- read_csv("all.csv")
stim <- read_csv("pseudorandomized_stimuli_list.csv")
xanew <- read_csv("Ratings_Warriner_et_al.csv")
data_anew <- merge(stim, anew, by.x = "word", by.y = "Description")
our_data <- merge(stim,xanew,by.x="word",by.y="Word")
# for stim values not in warriner values not in stim
non_match <- stim  %>%
filter(!stim$word %in% xanew$Word)
library(brms)
mod_eqvar <- brm(
num_letters ~ trial_type,
data = our_data,
cores = 4,  # Use 4 cores for parallel processing
file = "iqgroup"  # Save results into a file
)
library(brms)
mod_eqvar <- brm(
num_letters ~ trial_type,
data = our_data,
cores = 4,  # Use 4 cores for parallel processing
file = "iqgroup"  # Save results into a file
)
report(mod_eqvar)
report(mod_eqvar)
pacman::p_load(report)
report(mod_eqvar)
summary(mod_eqvar)
